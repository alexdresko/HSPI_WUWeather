using HomeSeerAPI;
using NullGuard;
using Scheduler;
using System;
using System.Collections.Specialized;
using System.Text;
using System.Web;

namespace Hspi
{
    using static StringUtil;

    [NullGuard(ValidationFlags.Arguments | ValidationFlags.NonPublic)]
    public class ConfigPage : PageBuilder
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigPage" /> class.
        /// </summary>
        /// <param name="HS">The hs.</param>
        /// <param name="pluginConfig">The plugin configuration.</param>
        public ConfigPage(IHSApplication HS, PluginConfig pluginConfig) : base(pageName)
        {
            this.HS = HS;
            this.pluginConfig = pluginConfig;
        }

        /// <summary>
        /// Gets the name of the web page.
        /// </summary>
        public string Name => pageName;

        /// <summary>
        /// Get the web page string for the configuration page.
        /// </summary>
        /// <returns>
        /// System.String.
        /// </returns>
        public string GetWebPage()
        {
            try
            {
                reset();

                AddHeader(HS.GetPageHeader(Name, "Configuration", string.Empty, string.Empty, false, false));

                System.Text.StringBuilder stb = new System.Text.StringBuilder();
                stb.Append(PageBuilderAndMenu.clsPageBuilder.DivStart("pluginpage", ""));
                stb.Append(BuildWebPageBody());
                stb.Append(PageBuilderAndMenu.clsPageBuilder.DivEnd());
                AddBody(stb.ToString());

                AddFooter(HS.GetPageFooter());
                suppressDefaultFooter = true;

                return BuildPage();
            }
            catch (Exception)
            {
                return "error";
            }
        }

        /// <summary>
        /// The user has selected a control on the configuration web page.
        /// The post data is provided to determine the control that initiated the post and the state of the other controls.
        /// </summary>
        /// <param name="data">The post data.</param>
        /// <param name="user">The name of logged in user.</param>
        /// <param name="userRights">The rights of the logged in user.</param>
        /// <returns>Any serialized data that needs to be passed back to the web page, generated by the clsPageBuilder class.</returns>
        public string PostBackProc(string data, [AllowNull]string user, int userRights)
        {
            NameValueCollection parts = HttpUtility.ParseQueryString(data);

            string form = parts["id"];

            if (form == INV($"{IdPrefix}{SaveButtonName}"))
            {
                StringBuilder results = new StringBuilder();

                // Validate
                if (string.IsNullOrWhiteSpace(parts[APIKeyId]))
                {
                    results.AppendLine("API Key is not Valid.<br>");
                }

                if (string.IsNullOrWhiteSpace(parts[StationId]))
                {
                    results.AppendLine("Station is not Valid.<br>");
                }

                if (!uint.TryParse(parts[RefreshIntervalId], out var refreshIntervalMinutes) || refreshIntervalMinutes > int.MaxValue)
                {
                    results.AppendLine("Refresh Interval is not Valid.<br>");
                }

                if (!System.Enum.TryParse<Unit>(parts[UnitId], out var unit))
                {
                    results.AppendLine("Unit is not Valid.<br>");
                }
                if (results.Length > 0)
                {
                    this.divToUpdate.Add(ErrorDivId, results.ToString());
                }
                else
                {
                    this.divToUpdate.Add(ErrorDivId, string.Empty);
                    this.pluginConfig.APIKey = parts[APIKeyId];
                    this.pluginConfig.RefreshIntervalMinutes = (int)refreshIntervalMinutes;
                    this.pluginConfig.StationId = parts[StationId];
                    this.pluginConfig.Unit = unit;
                    this.pluginConfig.DebugLogging = parts[DebugLoggingId] == "checked";
                    this.pluginConfig.FireConfigChanged();
                }

                this.divToUpdate.Add(ImageDivId, GetImageHtml());
                this.divToUpdate.Add(CallsPerDayId, GetCallsPerDay());
            }
            else if (form == INV($"{IdPrefix}{UnitId}"))
            {
                // do nothing
            }
            else
            {
                bool changed = false;
                foreach (var deviceDefintion in WUWeatherData.DeviceDefinitions)
                {
                    foreach (var childDeviceDefinition in deviceDefintion.Children)
                    {
                        string id = NameToId(deviceDefintion, childDeviceDefinition);
                        string value = parts[id];

                        if (value != null)
                        {
                            this.pluginConfig.SetEnabled(deviceDefintion, childDeviceDefinition, value == "checked");
                            changed = true;
                        }
                    }
                }
                if (changed)
                {
                    this.pluginConfig.FireConfigChanged();
                }
            }

            return base.postBackProc(Name, data, user, userRights);
        }

        /// <summary>
        /// Builds the web page body for the configuration page.
        /// The page has separate forms so that only the data in the appropriate form is returned when a button is pressed.
        /// </summary>
        private string BuildWebPageBody()
        {
            int i = 0;
            StringBuilder stb = new StringBuilder();

            var tabs = new clsJQuery.jqTabs("tab1id", PageName);
            var tab1 = new clsJQuery.Tab();
            tab1.tabTitle = "Settings";
            tab1.tabDIVID = INV($"tabs{i++}");
            tab1.tabContent = BuildSettingTab();
            tabs.tabs.Add(tab1);

            foreach (var deviceDefintion in WUWeatherData.DeviceDefinitions)
            {
                var tab = new clsJQuery.Tab();
                tab.tabTitle = deviceDefintion.Name;
                tab.tabDIVID = INV($"tabs{i++}");
                tab.tabContent = BuildTab(deviceDefintion);
                tabs.tabs.Add(tab);
            }

            tabs.postOnTabClick = false;
            stb.Append(tabs.Build());

            return stb.ToString();
        }

        private string BuildTab(RootDeviceData root)
        {
            StringBuilder stb = new StringBuilder();
            string idName = NameToId(root.Name);
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormStart(INV($"ftm{idName}"), INV($"Id{idName}"), "Post"));

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'");
            stb.Append("<tr height='5'><td colspan=2></td></tr>");
            stb.Append("<tr><td colspan=2> </td></tr>");
            stb.Append("<tr><td colspan=2><strong>Select devices to be created</strong><td></tr>");
            stb.Append("<tr><td colspan=2> </td></tr>");

            foreach (var childDeviceDefinition in root.Children)
            {
                stb.Append(INV($"<tr><td colspan=2>{FormCheckBox(NameToId(root, childDeviceDefinition), label: childDeviceDefinition.Name, @checked: pluginConfig.GetEnabled(root, childDeviceDefinition))}</td></tr>"));
            }
            stb.Append(@" </table>");
            stb.Append(@"</div>");
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormEnd());

            return stb.ToString();
        }

        private string GetImageHtml()
        {
            if (string.IsNullOrWhiteSpace(pluginConfig.StationId))
            {
                return INV($"<a href='http://www.wunderground.com' target='_blank'><img width='100px' alt='Powered by Weather Underground' src='{WUWeatherData.ImagesPathRoot}wundergroundLogo_4c_horz.png'></a>");
            }
            else
            {
                return INV($"<a href='http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID={pluginConfig.StationId}' target='_blank'><img src='http://banners.wunderground.com/cgi-bin/banner/ban/wxBanner?bannertype=wxstnsticker_both&weatherstationcount={pluginConfig.StationId}' height='160' width='160' border='0' alt='Weather Underground PWS {pluginConfig.StationId}'/></a>");
            }
        }

        private string GetCallsPerDay()
        {
            if (pluginConfig.RefreshIntervalMinutes != 0)
            {
                return INV($"&nbsp; ({ 1440 / pluginConfig.RefreshIntervalMinutes} calls per day)");
            }
            else
            {
                return string.Empty;
            }
        }

        private string BuildSettingTab()
        {
            int unitsSelection = -1;
            var unitsDropDown = new NameValueCollection();
            foreach (var value in Enum.GetValues(typeof(Unit)))
            {
                unitsDropDown.Set(EnumHelper.GetDescription((System.Enum)value), value.ToString());
                if ((Unit)value == pluginConfig.Unit)
                {
                    unitsSelection = unitsDropDown.Count - 1;
                }
            }

            StringBuilder stb = new StringBuilder();
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormStart("ftmSettings", "IdSettings", "Post"));

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'");
            stb.Append("<tr height='5'><td style='width:25%'></td><td style='width:20%'></td><td style='width:55%'></td></tr>");
            stb.Append(INV($"<tr><td class='tablecell'>APIKey:</td><td  colspan=2  class='tablecell' style='width: 50px'>{BuildTextBox(APIKeyId, pluginConfig.APIKey)}</td></tr>"));
            stb.Append(INV($"<tr><td class='tablecell'>Refresh Interval(minutes):</td><td class='tablecell'>{BuildTextBox(RefreshIntervalId, INV($"{pluginConfig.RefreshIntervalMinutes}"))} </ td ><td class='tablecell'><div id={CallsPerDayId}>{GetCallsPerDay()}</div></td></ tr > "));
            stb.Append(INV($"<tr><td class='tablecell'>Station:</td><td class='tablecell'>{BuildTextBox(StationId, INV($"{pluginConfig.StationId}"))}</td ><td class='tablecell'><div id='{ImageDivId}'>{GetImageHtml()}</div></td></ tr > "));
            stb.Append(INV($"<tr><td class='tablecell'>Unit:</td><td colspan=2 class='tablecell'>{BuildDropList(UnitId, unitsDropDown, unitsSelection)}</ td ></ tr > "));
            stb.Append(INV($"<tr><td class='tablecell'>Debug Logging Enabled:</td><td colspan=2 class='tablecell'>{BuildCheckBox(DebugLoggingId, string.Empty, this.pluginConfig.DebugLogging)}</ td ></ tr > "));
            stb.Append(INV($"<tr><td colspan=3><div id='{ErrorDivId}' style='color:Red'></div></td><td></td></tr>"));
            stb.Append(INV($"<tr><td colspan=3>&nbsp;&nbsp;{BuildButton("Save", SaveButtonName)}</td><td></td></tr>"));
            stb.Append("<tr height='5'><td colspan=3></td></tr>");
            stb.Append(INV($"<tr><td colspan=3></td></tr>"));
            stb.Append(@"<tr><td colspan=3><div>Icons made by <a href='http://www.freepik.com' title='Freepik' target='_blank'>Freepik</a> from <a href='http://www.flaticon.com' title='Flaticon' target='_blank'>www.flaticon.com</a> is licensed by <a href='http://creativecommons.org/licenses/by/3.0/' title='Creative Commons BY 3.0' target='_blank'>CC 3.0 BY</a></div></td></tr>");
            stb.Append(@"<tr height='5'><td colspan=3></td></tr>");
            stb.Append(@" </table>");
            stb.Append(@"</div>");
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormEnd());

            return stb.ToString();
        }

        private static string NameToId(string name)
        {
            return name.Replace(' ', '_');
        }

        private static string NameToId(DeviceDataBase parent, DeviceDataBase child)
        {
            return INV($"{NameToId(parent.Name)}_{NameToId(child.Name)}");
        }

        private const string SaveButtonName = "Save";
        private const string CallsPerDayId = "CallsPerDayId";
        private const string DebugLoggingId = "DebugLoggingId";
        private const string UnitId = "UnitId";
        private const string APIKeyId = "APIKeyId";
        private const string StationId = "StationId";
        private const string ErrorDivId = "message_id";
        private const string ImageDivId = "image_id";
        private const string RefreshIntervalId = "RefreshIntervalId";
        private static readonly string pageName = INV($"{WUWeatherData.PlugInName} Config");
        private readonly IHSApplication HS;
        private readonly PluginConfig pluginConfig;
    }
}